
'''
Handle the creation of the bet from the user.
Ask for a bill type to insert and if is correct return it.
'''


class Bet:

    bet_types = {"ambata": 1, "ambo": 2, "terno": 3, "quaterna": 4, "cinquina": 5}
    
    def __init__(self, bet_type, money):
        self.bet_type = bet_type
        self.money = money

    # Bet input handling
    def get_bet_input():
        bet = input('Select a type of bill between AMBATA AMBO TERNO QUATERNA and CINQUINA:\n').lower()   
        if bet in Bet.bet_types:
            return bet
        else:
            print(f'{bet} is not valid.')
            raise ValueError

    def get_bet() -> str:
        while True:
            try: 
                bet = Bet.get_bet_input()  
                return bet            
            except ValueError: pass

    def get_money_input():
        money = float(input('Insert the amount of money for that bet:\n'))
        if 200 >= money >= 1:
            return money
        else:
            print(f'Amount not valid.')
            raise ValueError

    def get_money() -> float:
        while True:
            try: 
                money = Bet.get_money_input()  
                return money            
            except ValueError: pass
            
            
    @classmethod
    def ask_bets(cls,numbers):

        '''
        param numbers: list of numbers generated by the user
        ask the bets to the user, checking if the money limit and the possile bets are played correctly
        after checking create a Bet object and append it to a list
        return a list of Bets objects
        '''
        money_played = 0 # count all the money played
        bets_played = [] # count all the bets played
        bets_list = []

        x = 'y'
        while x == 'y': # make a loop till the user press a key different from y
            
            # Ask bet  
            bet_input = cls.is_correct_bet(bets_played, numbers)
            bets_played.append(bet_input)
            
            # Ask money
            money_input = cls.is_correct_money(money_played)
            money_played += money_input

            bet = Bet(bet_input, money_input) 
            bets_list.append(bet)
            
            # Stop asking for another bet if the user played all the money or all the bets
            if money_played >= 200:
                print('You played all the possible money.\n')
                return bets_list
            if len(bets_played) == 5:
                print('You made all the possible bets.\n')
                return bets_list

            x = input('Do you want to make another bet?\nPress y to make another one else press a key.\n')

        return bets_list


    @classmethod
    def is_correct_bet(cls,bets_played, numbers):

        check_bet = False
        
        # Loop till the user insert a correct bet
        while check_bet == False:
            bet_input = cls.get_bet()

            # Check if the bet is already played
            if bet_input in bets_played:
                print(f'You have already bet on {bet_input} try again.')
                continue
  
            # Check the correct relation between bet and numbers
            if cls.bet_types[bet_input] > len(numbers):
                print(f"You can't bet {bet_input} and play only {len(numbers)} number{'' if len(numbers) == 1 else 's'}\nPlease insert a correct bet.")
                continue
            
            check_bet = True
            return bet_input


    @classmethod
    def is_correct_money(cls, money_played):
        check_money = False
        
        # Loop till the user insert a correct amount of money
        while check_money == False:
            money_input = cls.get_money()
            
            # Check if enough money
            if money_input > (200 - money_played):
                print(f'Not enough money, you can play max {200 - money_played}â‚¬')
                continue

            check_money = True
            return money_input   
        
        
  